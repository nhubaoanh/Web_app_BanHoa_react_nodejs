"use client"

import React, { useState, useEffect } from "react"
import { useNavigate } from "react-router-dom"
import api from "../../../services/api"
import "./styles.css"

const OrderConfirmation = () => {
  const [orders, setOrders] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")
  const navigate = useNavigate()

  const steps = [
    { title: "ƒê√£ ƒë·∫∑t h√†ng", icon: "üõçÔ∏è", status: "Ch·ªù x√°c nh·∫≠n" },
    { title: "X√°c nh·∫≠n ƒë∆°n", icon: "‚úì", status: "ƒê√£ x√°c nh·∫≠n" },
    { title: "ƒêang v·∫≠n chuy·ªÉn", icon: "üöö", status: "ƒêang v·∫≠n chuy·ªÉn" },
    { title: "Giao th√†nh c√¥ng", icon: "üì¶", status: "Giao th√†nh c√¥ng" },
  ]

  // L·∫•y danh s√°ch ƒë∆°n h√†ng
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        console.log("Fetching orders...") // Log ƒë·ªÉ debug
        const response = await api.get("/api/donhang")
        console.log("Orders response:", response.data) // Log ƒë·ªÉ debug
        if (response.data) {
          setOrders(response.data)
        } else {
          setError("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o")
        }
      } catch (err) {
        console.error("Error details:", err) // Log chi ti·∫øt l·ªói
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng: " + (err.response?.data?.message || err.message))
      } finally {
        setLoading(false)
      }
    }

    fetchOrders()
  }, [])

  const handleConfirmOrder = async (orderId) => {
    try {
      const response = await api.put(`/api/donhang/${orderId}`, {
        TrangThai: "ƒê√£ x√°c nh·∫≠n"
      })
      console.log("Confirm order response:", response.data) // Log ƒë·ªÉ debug
      
      // Refresh danh s√°ch ƒë∆°n h√†ng sau khi x√°c nh·∫≠n
      const updatedOrders = await api.get("/api/donhang")
      setOrders(updatedOrders.data)
    } catch (err) {
      console.error("Error confirming order:", err) // Log chi ti·∫øt l·ªói
      setError("Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng: " + (err.response?.data?.message || err.message))
    }
  }

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading">ƒêang t·∫£i danh s√°ch ƒë∆°n h√†ng...</div>
        <div className="loading-details">
          <p>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="error-container">
        <div className="error-message">{error}</div>
        <button className="btn btn-primary" onClick={() => navigate('/admin/quanlydonhang')}>
          Quay l·∫°i danh s√°ch ƒë∆°n h√†ng
        </button>
      </div>
    )
  }

  return (
    <div className="order-confirmation">
      <div className="page-header">
        <h1>X√°c nh·∫≠n ƒë∆°n h√†ng</h1>
      </div>

      <div className="orders-list">
        {orders.map((order) => {
          const currentStep = steps.findIndex(step => step.status === order.TrangThai)
          return (
            <div key={order.MaDonHang} className="order-card">
              <div className="steps-container">
                {steps.map((step, index) => {
                  const isActive = index <= currentStep
                  return (
                    <div key={index} className="step-item">
                      <div className={`step-icon ${isActive ? 'active' : ''}`}>
                        {step.icon}
                      </div>
                      <span className="step-title">{step.title}</span>
                      {index < steps.length - 1 && (
                        <div className={`step-line ${isActive ? 'active' : ''}`}></div>
                      )}
                    </div>
                  )
                })}
              </div>

              <div className="order-info">
                <div className="info-grid">
                  <div className="info-item">
                    <p className="info-label">M√£ ƒë∆°n:</p>
                    <p className="info-value">#{order.MaDonHang}</p>
                  </div>
                  <div className="info-item">
                    <p className="info-label">Ng√†y ƒë·∫∑t:</p>
                    <p className="info-value">{new Date(order.NgayDatHang).toLocaleDateString('vi-VN')}</p>
                  </div>
                  <div className="info-item">
                    <p className="info-label">Ng∆∞·ªùi nh·∫≠n:</p>
                    <p className="info-value">{order.TenKhachHang}</p>
                  </div>
                  <div className="info-item">
                    <p className="info-label">S·ªë ƒëi·ªán tho·∫°i:</p>
                    <p className="info-value">{order.SoDienThoai}</p>
                  </div>
                  <div className="info-item full-width">
                    <p className="info-label">ƒê·ªãa ch·ªâ:</p>
                    <p className="info-value">{order.DiaChi}</p>
                  </div>
                  <div className="info-item">
                    <p className="info-label">Thanh to√°n:</p>
                    <p className="info-value">{order.PhuongThucThanhToan}</p>
                  </div>
                  <div className="info-item">
                    <p className="info-label">Tr·∫°ng th√°i:</p>
                    <p className="info-value status">{order.TrangThai}</p>
                  </div>
                </div>
              </div>

              <div className="order-actions">
                {order.TrangThai === "Ch·ªù x√°c nh·∫≠n" && (
                  <button
                    className="btn btn-primary"
                    onClick={() => handleConfirmOrder(order.MaDonHang)}
                  >
                    X√°c nh·∫≠n ƒë∆°n h√†ng
                  </button>
                )}
              </div>
            </div>
          )
        })}

        {orders.length === 0 && (
          <div className="no-orders">
            Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c·∫ßn x√°c nh·∫≠n
          </div>
        )}
      </div>
    </div>
  )
}

export default OrderConfirmation
